package org.parog.yandex75;

/**
 * 1.
 * Диапазон значения числа: -2^31 <= x <= 2^31 - 1
 * 2.
 * Тестовый класс {@link ReverseInteger7Test}
 * 3.
 * Временная сложность: O(N), где N количество разрядов в числе x
 * Пространственная сложность: O(N), где N - число разрядов нового числа (на выходе инвертированное число с таким же
 * количеством разрядов)
 */
public class ReverseInteger7 {
    /**
     * Необходимо рассмотреть два случая, когда:
     * 1. При каждой итерации необходимо проверять > или < result числа 2_147_483_64, если {@code true}, то можем
     * не проверять последний разряд и вернуть 0 (оно уже будет переполнено), так как число больше > 2^31 - 1 или < 2^31
     * 2. Если result равен 2_147_483_64, то смотрим на последнее число: оно должно быть > 7 либо < -8
     *
     * @param x входящее число
     * @return инвертированное число
     */
    public static int reverse(int x) {
        // Integer.MAX_VALUE = 2_147_483_647 (заканчивает на 7)
        int intMax = 2_147_483_647; // 2^31 -1
        //Integer.MIN_VALUE = -2_147_483_648 (заканчивает на 8)
        int intMin = -2_147_483_648; // -2^31

        int result = 0;
        while (x != 0) {
            // берем последнюю цифру
            int digit = x % 10;
            // уменьшаем разряд на каждой итерации
            x /= 10;

            if (result > intMax / 10 || (result == intMax / 10 && digit >= intMax % 10)) {
                return 0;
            }
            if (result < intMin / 10 || (result == intMin / 10 && digit <= intMin % 10)) {
                return 0;
            }
            // инвертируем число добавляя разряд в конец
            result = (result * 10) + digit;
        }
        return result;
    }
}
